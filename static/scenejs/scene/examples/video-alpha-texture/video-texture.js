/*
 Demonstration of video textures

 The demo is very simple - we define a video node that references an OGG file,
 then we define a texture node that references the video node.

 Then the scene will continuously redraw, each time updating the video texture.

 SceneJS scenes don't normally keep redrawing by themselves (instead only redrawing
 only whenever something changes), but since this scene contains a video, it needs to
 redraw to keep updating the texture.


 https://github.com/xeolabs/scenejs/wiki/video

 */
SceneJS.createScene({
    type: "scene",
    id: "theScene",
    canvasId: "theCanvas",
    loggingElementId: "theLoggingDiv",

    nodes: [

        /*--------------------------------------------------------------------------------------------------------------
         * Library section containing a shader node which defines a fog effect.
         *
         * The shader binds two custom functions into the fragment shader that
         * is automatically generated by SceneJS; one function collects the
         * view-space fragment position, while the other function intercepts
         * the outgoing fragment colour and applies the fog effect to it, which is
         * computed from the fragment position's Z-depth.
         *
         * The fog effect is configured by a set of uniforms, which the shader
         * node exposes as parameters with default values.
         *
         * The shader is "instantiated" later in the scene by another shader
         * which shares its node core.
         *------------------------------------------------------------------------------------------------------------*/

        {
            type: "library",
            nodes: [

                /*----------------------------------------------------------------------
                 * Shader
                 *--------------------------------------------------------------------*/

                {
                    type: "shader",

                    coreId: "chromaKeyShader",

                    shaders: [

                        /*----------------------------------------------------------------------
                         * Custom fog fragment shader
                         *--------------------------------------------------------------------*/

                        {
                            stage:  "fragment",

                            code:  [

                                /* Parameter uniforms
                                 */
                                "uniform float    chromaKeyTolerance;",

                                /* Modifies fragment colour
                                 */
                                "vec4 fogPixelColorFunc(vec4 color) {",

                                "   if (color.r > color.g - chromaKeyTolerance && " +
                                "       color.r < color.g + chromaKeyTolerance && " +
                                "       color.g > color.b - chromaKeyTolerance && " +
                                "       color.g < color.b + chromaKeyTolerance) { ",

                                "       color.a  = clamp((color.r + color.g + color.b) - 0.5, 0.0, 1.0);" +
                                "   } else { ",
                                "       color.a = 0.5;",
                                "   }",

                                "   return color;",
                                "}"
                            ],

                            /* Bind our functions to hooks
                             */
                            hooks: {
                                pixelColor: "fogPixelColorFunc"
                            }
                        }
                    ],

                    /* Declare parameters and set default values
                     */
                    params: {
                        chromaKeyTolerance: 0.1
                    }
                }
            ]
        },

        {
            type: "renderer",
            clearColor: { r: 0.3, g: 0.3, b: 0.3 },
            clear: {
                depth : true,
                color : true
            },

            nodes: [

                /*-------------------------------------------------------------------
                 * The video we'll sample our texture from - doesn't matter where we
                 * define this node in the scene graph:
                 *-----------------------------------------------------------------*/

                {
                    type: "video",
                    id: "my-video",
                    src: "../web/movies/alphaVideo.ogv"
                },

                {
                    type: "lookAt",
                    eye : { x: 0.0, y: 0.0, z: -2},
                    look : { x : 0.0, y : 0.0, z : 0 },
                    up : { x: 0.0, y: 1.0, z: 0.0 },

                    nodes: [
                        {
                            type: "camera",
                            optics: {
                                type: "perspective",
                                fovy : 55.0,
                                aspect : 1.47,
                                near : 0.10,
                                far : 300.0
                            },

                            nodes: [
                                {
                                    type:          "light",
                                    mode:          "dir",
                                    color:         { r: 1.0, g: 1.0, b: 1.0 },
                                    diffuse:       true,
                                    specular:      false,
                                    dir:           { x: 1.0, y: 1.0, z: -1.0 }
                                },
                                {
                                    type:          "light",
                                    mode:          "dir",
                                    color:         { r: 1.0, g: 1.0, b: 1.0 },
                                    diffuse:       true,
                                    specular:      false,
                                    dir:           { x: 0.0, y: 1.0, z: 1.0 }
                                },
                                {
                                    type: "material",
                                    baseColor:      { r: 0.6, g: 0.6, b: 1.0 },
                                    specularColor:  { r: 1.0, g: 1.0, b: 1.0 },
                                    specular:       0.2,
                                    shine:          1.0,
                                    emit: 0.0,

                                    nodes: [

                                        {
                                            type: "translate",
                                            z: 10,
                                            y: 0,

                                            nodes: [
                                                {
                                                    type: "scale",
                                                    
                                                    y: 2,

                                                    nodes: [
                                                        {
                                                            type: "cube"
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },

                                {
                                    type: "material",
                                    baseColor:      { r: 0.0, g: 0.0, b: 0.0 },
                                    specularColor:  { r: 0.0, g: 0.0, b: 0.0 },
                                    specular:       0.2,
                                    shine:          6.0,
                                    emit: 0.3,

                                    nodes: [

                                        /*-------------------------------------------------------------------
                                         * A texture node that samples the video node we defined above
                                         *-----------------------------------------------------------------*/

                                        {
                                            type: "texture",
                                            id: "theTexture",

                                            layers: [
                                                {
                                                    video: "my-video",
                                                    blendMode: "add"
                                                }
                                            ],

                                            nodes: [
                                                {
                                                    type: "rotate",
                                                    id: "quad-pitch",
                                                    angle: -30.0,
                                                    x : 1.0,

                                                    nodes: [
                                                        {
                                                            type: "rotate",
                                                            id: "quad-yaw",
                                                            angle: 0.0,
                                                            y : 1.0,

                                                            nodes: [
                                                                {
                                                                    type: "shader",
                                                                    coreId: "chromaKeyShader",

                                                                    nodes: [
                                                                        {
                                                                            type: "flags",
                                                                            flags: {
                                                                                transparent: true
                                                                            },

                                                                            nodes: [

                                                                                {
                                                                                    type: "quad"
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
});


/*----------------------------------------------------------------------
 * Scene rendering loop and mouse handler stuff follows
 *---------------------------------------------------------------------*/

var yaw = 0;
var pitch = -30;
var lastX;
var lastY;
var dragging = false;

var canvas = document.getElementById("theCanvas");

function mouseDown(event) {
    lastX = event.clientX;
    lastY = event.clientY;
    dragging = true;
}

function mouseUp() {
    dragging = false;
}

var scene = SceneJS.scene("theScene");

/* On a mouse drag, we'll re-render the scene, passing in
 * incremented angles in each time.
 */
function mouseMove(event) {
    if (dragging) {
        yaw += (event.clientX - lastX) * 0.5;
        pitch += (event.clientY - lastY) * -0.5;

        scene.findNode("quad-yaw").set("angle", yaw);
        scene.findNode("quad-pitch").set("angle", pitch);

        lastX = event.clientX;
        lastY = event.clientY;
    }
}

canvas.addEventListener('mousedown', mouseDown, true);
canvas.addEventListener('mousemove', mouseMove, true);
canvas.addEventListener('mouseup', mouseUp, true);


scene.start();

